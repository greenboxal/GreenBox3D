<!-- 
  Copyright (c) 2013 The GreenBox Development LLC, all rights reserved

  This file is a proprietary part of GreenBox3D, disclosing the content
  of this file without the owner consent may lead to legal actions
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Have our package build run after the user builds the project. -->
  <PropertyGroup>
    <CoreBuildDependsOn>
      BuildContentProjects;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>

    <CoreCleanDependsOn>
      CleanContentProjects;
      $(CoreCleanDependsOn)
    </CoreCleanDependsOn>
  </PropertyGroup>

  <!--
    ============================================================
                                        _GetContentReferences

    Creates ContentReference items for ProjectReference items which
    are content project references. Also splits referenced projects
    into two lists: those that exist on disk and those that don't.
    ============================================================
    -->
  <Target
    Name="_GetContentReferences">

    <ItemGroup>
      <ContentReference Include="@(ProjectReference)" Condition="'%(ProjectReference.ReferenceType)' == 'Content'" />
      <!-- Break the project list into two lists: those that exist on disk and those that don't. -->
      <_MSBuildContentProjectExistent Include="@(ContentReference)" Condition="Exists('%(Identity)')" />
      <_MSBuildContentProjectReferenceNonexistent Include="@(ContentReference)" Condition="!Exists('%(Identity)')" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                BeforeAssignProjectConfiguration
    
    Removes content project references from the ProjectReference
    item group. This is to opt out of the assembly resolution
    and project reference configuration processes because content
    projects do not produce DLLs.
    ============================================================
    -->
  <PropertyGroup>
    <BeforeAssignProjectConfigurationDependsOn>
      _GetContentReferences
    </BeforeAssignProjectConfigurationDependsOn>
  </PropertyGroup>

  <Target
    Name="BeforeAssignProjectConfiguration"
    DependsOnTargets="$(BeforeAssignProjectConfigurationDependsOn)"
    BeforeTargets="AssignProjectConfiguration">

    <ItemGroup>
      <ProjectReference Remove="@(ContentReference)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        SetParentOutputDir
    ============================================================
    -->
  <Target
    Name="SetParentOutputDir">

    <CreateProperty Value="$(TargetDir)">
      <Output TaskParameter="Value" PropertyName="ParentOutputDir"/>
    </CreateProperty>
    <CreateProperty Value="$(MSBuildProjectDirectory)\$(IntermediateOutputPath)">
      <Output TaskParameter="Value" PropertyName="ParentIntermediateDir"/>
    </CreateProperty>
  </Target>

  <!--
    ============================================================
                                        BuildContentProjects

    Builds nested content projects to match the current platform
    and configuration. Projects can skip this target by setting
    SkipNestedContentBuild to true.
    ============================================================
    -->
  <PropertyGroup>
    <BuildContentProjectsDependsOn>
      PrepareForBuild;
      _GetContentReferences;
      SetParentOutputDir
    </BuildContentProjectsDependsOn>
  </PropertyGroup>

  <Target
    Name="BuildContentProjects"
    DependsOnTargets="$(BuildContentProjectsDependsOn)">

    <!--
        Always build nested content projects, because the IDE and/or solution does not build them.
        
        The $(ContentProjectBuildTargets) will normally be blank so that the project's
        default target is used during a P2P reference. However if a custom build process requires
        that the referenced project has a different target to build it can be specified.
        -->

    <MSBuild
      Projects="@(_MSBuildContentProjectExistent)"
      BuildInParallel="true"
      Targets="$(ContentProjectBuildTargets)"
      Properties="Configuration=$(Configuration); Platform=$(Platform); ParentOutputDir=$(ParentOutputDir); ParentIntermediateDir=$(ParentIntermediateDir); ParentProjectDir=$(ProjectDir); BuildingContent=true"
      Condition="'@(_MSBuildContentProjectExistent)'!=''">

      <Output TaskParameter="TargetOutputs" ItemName="_BuiltNestedContentFiles"/>
    </MSBuild>
  </Target>

  <!--
    ============================================================
                                        CleanContentProjects

    Cleans nested content projects matching the current platform
    and configuration.
    ============================================================
    -->
  <PropertyGroup>
    <CleanContentProjectsDependsOn>
      _GetContentReferences;
      SetParentOutputDir
    </CleanContentProjectsDependsOn>
  </PropertyGroup>

  <Target
    Name="CleanContentProjects"
    DependsOnTargets="$(CleanContentProjectsDependsOn)">

    <MSBuild
      Projects="@(_MSBuildContentProjectExistent)"
      Targets="Clean"
      Properties="Configuration=$(Configuration); Platform=$(Platform); ParentOutputDir=$(ParentOutputDir); ParentIntermediateDir=$(ParentIntermediateDir)"
      Condition="'@(_MSBuildContentProjectExistent)'!=''" />
  </Target>

  <!--
    ============================================================
                                        GetCopyToOutputDirectoryContentProjectItems

    Creates an item group of all the most-recently-built outputs
    from the nested projects. This target is meant to be chained
    by GetCopyToOutputDirectoryItems, so that content can be added
    to the list of files to copy from projects referencing this
    one.
    
    Also hooking into MSBuild's preexisting GetCopyToOutputDirectoryItemDependsOn
    (which now exists as a property in MSBuild3.5, where it didn't in MSBuild 2.0)
    ============================================================
    -->

  <PropertyGroup>
    <GetCopyToOutputDirectoryItemsDependsOn>
      $(GetCopyToOutputDirectoryItemsDependsOn);
      GetCopyToOutputDirectoryContentProjectItems
    </GetCopyToOutputDirectoryItemsDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <GetCopyToOutputDirectoryContentProjectItemsDependsOn>
      _GetContentReferences;
      SetParentOutputDir
    </GetCopyToOutputDirectoryContentProjectItemsDependsOn>
  </PropertyGroup>

  <Target
    Name="GetCopyToOutputDirectoryContentProjectItems"
    DependsOnTargets="$(GetCopyToOutputDirectoryContentProjectItemsDependsOn)">

    <!-- Get items from child projects first. -->
    <MSBuild
      Projects="@(_MSBuildContentProjectExistent)"
      Targets="GetCopyToOutputDirectoryItems"
      Properties="Configuration=$(Configuration); Platform=$(Platform); ParentOutputDir=$(ParentOutputDir); ParentIntermediateDir=$(ParentIntermediateDir)"
      Condition="'@(_MSBuildContentProjectExistent)'!=''">

      <Output TaskParameter="TargetOutputs" ItemName="_AllNestedContentProjectItemsWithTargetPath"/>

    </MSBuild>

    <!-- Target outputs must be full paths because they will be consumed by a different project. -->
    <CreateItem
      Include="@(_AllNestedContentProjectItemsWithTargetPath->'%(FullPath)')"
      Condition="'%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"
                >
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_NestedContentItemsToCopyToOutputDirectoryAlways"
              Condition="'%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_NestedContentItemsToCopyToOutputDirectory"
              Condition="'%(_AllNestedContentProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>
  </Target>

  <!--
  ============================================================
                                      _CopySourceItemsToOutputDirectory
  ============================================================
  -->
  <Target
      Name="_CopySourceItemsToOutputDirectory"
      DependsOnTargets="
            GetCopyToOutputDirectoryItems;
            _CopyOutOfDateSourceItemsToOutputDirectory;
            _CopyOutOfDateSourceItemsToOutputDirectoryAlways;
            GetCopyToOutputDirectoryContentProjectItems;
            _CopyOutOfDateNestedContentItemsToOutputDirectory;
            _CopyOutOfDateNestedContentItemsToOutputDirectoryAlways;"/>





  <!--
  ============================================================
                                      _CopyOutOfDateNestedContentItemsToOutputDirectory

  Copy files that have the CopyToOutputDirectory attribute set to 'PreserveNewest'.
  ============================================================
  -->
  <Target
      Name="_CopyOutOfDateNestedContentItemsToOutputDirectory"
      Condition=" '@(_NestedContentItemsToCopyToOutputDirectory)' != '' "
      Inputs="@(_NestedContentItemsToCopyToOutputDirectory)"
      Outputs="@(_NestedContentItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')">
 
    <!--
    Not using SkipUnchangedFiles="true" because the application may want to change
    one of these files and not have an incremental build replace it.
    -->
    <Copy
        SourceFiles = "@(_NestedContentItemsToCopyToOutputDirectory)"
        DestinationFiles = "@(_NestedContentItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>

  <!--
  ============================================================
                                      _CopyOutOfDateNestedContentItemsToOutputDirectoryAlways

  Copy files that have the CopyToOutputDirectory attribute set to 'Always'.
  ============================================================
  -->
  <Target
      Name="_CopyOutOfDateNestedContentItemsToOutputDirectoryAlways"
      Condition=" '@(_NestedContentItemsToCopyToOutputDirectoryAlways)' != '' ">
    
    <!--
    Not using SkipUnchangedFiles="true" because the application may want to change
    one of these files and not have an incremental build replace it.
    -->
    <Copy
        SourceFiles = "@(_NestedContentItemsToCopyToOutputDirectoryAlways)"
        DestinationFiles = "@(_NestedContentItemsToCopyToOutputDirectoryAlways->'$(OutDir)%(TargetPath)')">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>
</Project>
